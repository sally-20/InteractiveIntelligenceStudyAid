{"Beginner": {"Unit 1- Introduction to Algorithms": {"Lesson 1- What are algorithms?": {"Sub Lesson 1": " Definition and characteristics.", "Sub Lesson 2": " Real"}, "Lesson 2- Why are algorithms significant?": {"Sub Lesson 1": " Importance in problem", "Sub Lesson 2": " Efficiency and optimization."}, "Lesson 3- Basic algorithm analysis concepts": {"Sub Lesson 1": " Time complexity vs. space complexity.", "Sub Lesson 2": " Asymptotic notation (Big O, Theta, Omega)."}, "Lesson 4- Time complexity and its importance": {"Sub Lesson 1": " Measuring algorithm efficiency.", "Sub Lesson 2": " Analyzing time complexity of simple algorithms."}}, "Unit 2- Basic Data Structures": {"Lesson 1- Introduction to arrays and their uses": {"Sub Lesson 1": " Array basics and declaration.", "Sub Lesson 2": " Accessing and modifying array elements."}, "Lesson 2- Working with linked lists": {"Sub Lesson 1": " Singly linked lists and their nodes.", "Sub Lesson 2": " Insertion and deletion in linked lists."}, "Lesson 3- Understanding stacks and their operations": {"Sub Lesson 1": " Stack principles and LIFO.", "Sub Lesson 2": " Push, pop, and peek operations."}, "Lesson 4- Basics of queues and how they work": {"Sub Lesson 1": " Queue concepts and FIFO.", "Sub Lesson 2": " Enqueue and dequeue operations."}}, "Unit 3- Sorting and Searching Algorithms": {"Lesson 1- Sorting data with bubble sort": {"Sub Lesson 1": " Bubble sort algorithm steps.", "Sub Lesson 2": " Time complexity analysis of bubble sort."}, "Lesson 2- Insertion sort step by step": {"Sub Lesson 1": " Insertion sort algorithm details.", "Sub Lesson 2": " Comparing insertion sort with bubble sort."}, "Lesson 3- Selection sort explained": {"Sub Lesson 1": " Selection sort procedure.", "Sub Lesson 2": " Comparing selection sort with other sorting methods."}, "Lesson 4- Linear search for finding elements": {"Sub Lesson 1": " How linear search works.", "Sub Lesson 2": " Time complexity of linear search."}, "Lesson 5- Binary search for faster searching": {"Sub Lesson 1": " Binary search principles.", "Sub Lesson 2": " Time complexity analysis of binary search."}}, "Unit 4- Basic Recursion": {"Lesson 1- What is recursion?": {"Sub Lesson 1": " Recursion definition and examples.", "Sub Lesson 2": " Recursive vs. iterative approaches."}, "Lesson 2- Recursive problem-solving strategies": {"Sub Lesson 1": " Divide and conquer.", "Sub Lesson 2": " Top"}, "Lesson 3- Implementing recursion in algorithms": {"Sub Lesson 1": " Recursive function structure.", "Sub Lesson 2": " Handling base cases and recursive calls."}}, "Unit 5- Introduction to Graphs": {"Lesson 1- Basics of graph theory": {"Sub Lesson 1": " Graph definition and terminology.", "Sub Lesson 2": " Directed vs. undirected graphs."}, "Lesson 2- Understanding vertices and edges": {"Sub Lesson 1": " What are graph vertices?", "Sub Lesson 2": " What are graph edges?"}, "Lesson 3- Graph representations - adjacency matrix": {"Sub Lesson 1": " Adjacency matrix concept.", "Sub Lesson 2": " Pros and cons of using adjacency matrices."}, "Lesson 4- Graph representations - adjacency list": {"Sub Lesson 1": " Adjacency list structure.", "Sub Lesson 2": " Advantages of adjacency lists in certain scenarios."}}}, "Intermediate": {"Unit 1- Advanced Data Structures": {"Lesson 1- Binary Trees and AVL Trees": {"Sub Lesson 1": " Binary tree structure and terminology.", "Sub Lesson 2": " AVL trees for balanced binary search."}, "Lesson 2- Priority Queues and Heapsort": {"Sub Lesson 1": " Priority queue operations and properties.", "Sub Lesson 2": " Sorting with heapsort algorithm."}}, "Unit 2- Graph Algorithms": {"Lesson 1- Breadth-First Search (BFS)": {"Sub Lesson 1": " BFS principles and traversal.", "Sub Lesson 2": " Applications of BFS in graph problems."}, "Lesson 2- Depth-First Search (DFS)": {"Sub Lesson 1": " DFS traversal and backtracking.", "Sub Lesson 2": " Utilizing DFS for connectivity and cycle detection."}, "Lesson 3- Finding Shortest Paths": {"Sub Lesson 1": " Dijkstra's algorithm step by step.", "Sub Lesson 2": " Bellman"}}, "Unit 3- Dynamic Programming": {"Lesson 1- Introduction to Dynamic Programming": {"Sub Lesson 1": " Dynamic programming fundamentals.", "Sub Lesson 2": " Role of memoization and tabulation."}, "Lesson 2- Identifying Overlapping Subproblems": {"Sub Lesson 1": " Recognizing common subproblems.", "Sub Lesson 2": " Examples of problems with overlapping substructures."}, "Lesson 3- Solving Optimization Problems with DP": {"Sub Lesson 1": " Knapsack problem and dynamic programming.", "Sub Lesson 2": " Longest common subsequence problem and its DP solution."}}, "Unit 4- Divide and Conquer": {"Lesson 1- Divide and Conquer Paradigm": {"Sub Lesson 1": " Understanding the divide and conquer approach.", "Sub Lesson 2": " Comparing it to other algorithmic paradigms."}, "Lesson 2- Sorting with Merge Sort": {"Sub Lesson 1": " Merge sort algorithm in detail.", "Sub Lesson 2": " Analyzing merge sort's time complexity."}, "Lesson 3- Quicksort and Closest Pair Problems": {"Sub Lesson 1": " Quicksort algorithm and its efficiency.", "Sub Lesson 2": " Solving the closest pair problem with divide and conquer."}}, "Unit 5- Greedy Algorithms": {"Lesson 1- Greedy Choice Property": {"Sub Lesson 1": " Core principles of the greedy approach.", "Sub Lesson 2": " How to make greedy choices."}, "Lesson 2- Applying Greedy Algorithms": {"Sub Lesson 1": " Implementing the greedy strategy.", "Sub Lesson 2": " Evaluating greedy solutions."}, "Lesson 3- Huffman Coding and Minimum Spanning Trees": {"Sub Lesson 1": " Huffman coding for data compression.", "Sub Lesson 2": " Minimum spanning trees "}}, "Unit 6- Network Flow Algorithms": {"Lesson 1- Ford-Fulkerson Algorithm and Residual Graphs": {"Sub Lesson 1": " Ford", "Sub Lesson 2": " Understanding residual graphs."}, "Lesson 2- Maximum Flow and Minimum Cut": {"Sub Lesson 1": " Finding maximum flow in networks.", "Sub Lesson 2": " Identifying the minimum cut."}}}, "Advanced": {"Unit 1- Advanced Graph Algorithms": {"Lesson 1- Strongly Connected Components and Topological Sorting": {"Sub Lesson 1": " Discovering strongly connected components.", "Sub Lesson 2": " Applying topological sorting."}, "Lesson 2- Advanced Shortest Path Algorithms": {"Sub Lesson 1": " A* algorithm for heuristic search.", "Sub Lesson 2": " Johnson's algorithm for all pairs shortest paths."}}, "Unit 2- Approximation Algorithms": {"Lesson 1- Designing Approximation Algorithms": {"Sub Lesson 1": " Strategies for designing approximation algorithms.", "Sub Lesson 2": " Transforming problems for approximation."}, "Lesson 2- Analyzing Performance Guarantees": {"Sub Lesson 1": " Understanding approximation ratios.", "Sub Lesson 2": " Assessing the quality of approximate solutions."}, "Lesson 3- Applications in Optimization Problems": {"Sub Lesson 1": " Solving NP", "Sub Lesson 2": " Real"}}, "Unit 3- Randomized Algorithms": {"Lesson 1- Incorporating Randomness into Algorithms": {"Sub Lesson 1": " The role of randomness in algorithms.", "Sub Lesson 2": " Benefits and drawbacks of randomized algorithms."}, "Lesson 2- Randomized Sorting, Selection, and Graph Problems": {"Sub Lesson 1": " Implementing randomized quicksort.", "Sub Lesson 2": " Monte Carlo algorithms for estimation."}, "Lesson 3- Monte Carlo and Las Vegas Algorithms": {"Sub Lesson 1": " Monte Carlo vs. Las Vegas algorithms.", "Sub Lesson 2": " Applications of both types in problem"}}, "Unit 4- Online Algorithms": {"Lesson 1- Algorithms for Dynamic Environments": {"Sub Lesson 1": " Challenges in online algorithm design.", "Sub Lesson 2": " How online algorithms adapt to changing data."}, "Lesson 2- Competitive Analysis and Algorithm Competitiveness": {"Sub Lesson 1": " Competitive analysis principles.", "Sub Lesson 2": " Assessing the competitiveness of online algorithms."}, "Lesson 3- Applications in Caching, Load Balancing, and Scheduling": {"Sub Lesson 1": " Practical applications of online algorithms.", "Sub Lesson 2": " Efficiency gains in caching, load balancing, and scheduling."}}, "Unit 5- Streaming Algorithms": {"Lesson 1- Algorithms for Processing Large Data Streams": {"Sub Lesson 1": " Challenges in streaming data processing.", "Sub Lesson 2": " Advantages of streaming algorithms."}, "Lesson 2- Sketching, Sampling, and Summarization Techniques": {"Sub Lesson 1": " Sketching and sampling methods.", "Sub Lesson 2": " Summarization techniques for large data streams."}, "Lesson 3- Applications in Data Analytics and Network Monitoring": {"Sub Lesson 1": " Real", "Sub Lesson 2": " Monitoring and analyzing data streams in various contexts."}}, "Unit 6- Parallel and Distributed Algorithms": {"Lesson 1- Parallel Sorting and Graph Algorithms": {"Sub Lesson 1": " Parallelism in sorting algorithms.", "Sub Lesson 2": " Efficient graph processing in parallel."}, "Lesson 2- Understanding Communication and Synchronization Overhead": {"Sub Lesson 1": " Challenges of communication and synchronization.", "Sub Lesson 2": " Strategies for minimizing overhead."}, "Lesson 3- MapReduce-Based Algorithms": {"Sub Lesson 1": " Overview of MapReduce paradigm.", "Sub Lesson 2": " Implementing algorithms in a MapReduce framework."}}, "Unit 7- Advanced Data Structures": {"Lesson 1- Exploring Advanced Tree Structures": {"Sub Lesson 1": " Understanding segment trees.", "Sub Lesson 2": " Applications and advantages of Fenwick trees."}, "Lesson 2- Geometric Data Structures and Their Applications": {"Sub Lesson 1": " Solving geometric problems efficiently.", "Sub Lesson 2": " Use cases in computational geometry and beyond."}}, "Unit 8- Quantum Algorithms": {"Lesson 1- Introduction to Quantum Computing": {"Sub Lesson 1": " Fundamentals of quantum computing.", "Sub Lesson 2": " Key concepts in quantum information."}, "Lesson 2- Quantum Gates and Their Operations": {"Sub Lesson 1": " Quantum gates and quantum circuits.", "Sub Lesson 2": " Quantum entanglement and superposition."}, "Lesson 3- Quantum Algorithms like Grover's and Shor's": {"Sub Lesson 1": " Grover's quantum search algorithm.", "Sub Lesson 2": " Shor's quantum factoring algorithm and implications."}}, "Unit 9- Cryptography and Secure Computation": {"Lesson 1- Algorithms for Encryption, Decryption, and Secure Communication": {"Sub Lesson 1": " Encryption techniques and public", "Sub Lesson 2": " Ensuring secure communication with cryptographic protocols."}, "Lesson 2- Zero-Knowledge Proofs and Secure Multiparty Computation": {"Sub Lesson 1": " Zero", "Sub Lesson 2": " Achieving secure computation in multiparty scenarios."}, "Lesson 3- Analyzing Cryptographic Protocols and Their Efficiency": {"Sub Lesson 1": " Evaluation of cryptographic protocol performance.", "Sub Lesson 2": " Identifying vulnerabilities and improving efficiency."}}, "Unit 10- External Memory Algorithms": {"Lesson 1- Algorithms Optimized for External Storage Devices": {"Sub Lesson 1": " Challenges of external memory and I/O efficiency.", "Sub Lesson 2": " Techniques for optimizing algorithms for external storage."}, "Lesson 2- I/O-Efficient Algorithms and Cache-Oblivious Algorithms": {"Sub Lesson 1": " Principles of I/O", "Sub Lesson 2": " Cache"}, "Lesson 3- Sorting, Searching, and Graph Algorithms in External Memory": {"Sub Lesson 1": " Efficient external memory sorting techniques.", "Sub Lesson 2": " Handling external memory data structures for searching and graph processing."}}, "Unit 11- Fine-Grained Complexity": {"Lesson 1- Study of Hardness within Polynomial Time": {"Sub Lesson 1": " Defining fine", "Sub Lesson 2": " Understanding complexity within P."}, "Lesson 2- Parameterized Complexity and Kernelization": {"Sub Lesson 1": " Principles of parameterized complexity.", "Sub Lesson 2": " Kernelization techniques for tackling complex problems."}, "Lesson 3- Relationships to NP-Completeness and Lower Bounds": {"Sub Lesson 1": " Connection between fine", "Sub Lesson 2": " Techniques for proving lower bounds and hardness within polynomial time."}}, "Unit 12- Algorithmic Game Theory": {"Lesson 1- Intersection of Algorithms and Game Theory": {"Sub Lesson 1": " Merging algorithms and game theory concepts.", "Sub Lesson 2": " Exploring strategic interactions in algorithmic settings."}, "Lesson 2- Mechanism Design, Auctions, and Algorithmic Aspects of Markets": {"Sub Lesson 1": " Mechanism design for desirable outcomes.", "Sub Lesson 2": " Auctions, market algorithms, and revenue maximization."}, "Lesson 3- Analyzing Strategic Behavior in Algorithmic Settings": {"Sub Lesson 1": " Evaluating strategic behavior in algorithmic contexts.", "Sub Lesson 2": " Implications for practical applications and decision"}}, "Unit 13- Geometric Algorithms": {"Lesson 1- Solving Problems Involving Geometric Objects": {"Sub Lesson 1": " Introduction to geometric algorithms and their significance.", "Sub Lesson 2": " Core challenges in solving geometric problems."}, "Lesson 2- Convex Hulls, Nearest Neighbor Search, and Voronoi Diagrams": {"Sub Lesson 1": " Algorithms for calculating convex hulls.", "Sub Lesson 2": " Nearest neighbor search techniques."}, "Lesson 3- Applications in Computer Graphics, Computational Geometry, and Robotics": {"Sub Lesson 1": " Real", "Sub Lesson 2": " Robotics and computational geometry use cases."}}, "Unit 14- Complexity Theory and Lower Bounds": {"Lesson 1- Exploring Advanced Complexity Classes": {"Sub Lesson 1": " Beyond P and NP ", "Sub Lesson 2": " Theoretical implications and applications."}, "Lesson 2- Techniques for Proving Algorithmic Lower Bounds": {"Sub Lesson 1": " Approaches for demonstrating limits on computational efficiency.", "Sub Lesson 2": " Lower bounds and their impact on algorithm design."}, "Lesson 3- Interactive Proofs and Connections to Circuit Complexity": {"Sub Lesson 1": " Interactive proof systems and their role in complexity theory.", "Sub Lesson 2": " Connections to circuit complexity and advanced theoretical concepts."}}}}